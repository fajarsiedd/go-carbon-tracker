// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entities "go-carbon-tracker/entities"

	mock "github.com/stretchr/testify/mock"
)

// VehicleRepository is an autogenerated mock type for the VehicleRepository type
type VehicleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *VehicleRepository) Create(_a0 entities.Vehicle) (entities.Vehicle, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Vehicle) (entities.Vehicle, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.Vehicle) entities.Vehicle); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(entities.Vehicle) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *VehicleRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: filter
func (_m *VehicleRepository) GetAll(filter entities.Filter) ([]entities.Vehicle, entities.Pagination, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Vehicle
	var r1 entities.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(entities.Filter) ([]entities.Vehicle, entities.Pagination, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(entities.Filter) []entities.Vehicle); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Filter) entities.Pagination); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Get(1).(entities.Pagination)
	}

	if rf, ok := ret.Get(2).(func(entities.Filter) error); ok {
		r2 = rf(filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: id
func (_m *VehicleRepository) GetByID(id string) (entities.Vehicle, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.Vehicle, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entities.Vehicle); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *VehicleRepository) Update(_a0 entities.Vehicle) (entities.Vehicle, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Vehicle) (entities.Vehicle, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.Vehicle) entities.Vehicle); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(entities.Vehicle) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVehicleRepository creates a new instance of VehicleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVehicleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VehicleRepository {
	mock := &VehicleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
