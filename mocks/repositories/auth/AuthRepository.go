// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entities "go-carbon-tracker/entities"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// Login provides a mock function with given fields: user
func (_m *AuthRepository) Login(user entities.User) (entities.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.User) (entities.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *AuthRepository) Register(user entities.User) (entities.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.User) (entities.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
